// Mocks generated by Mockito 5.0.17 from annotations
// in expire_app/test/Unit%20test/firebase_auth_helper_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:expire_app/helpers/firestore_helper.dart' as _i3;
import 'package:expire_app/helpers/user_info.dart' as _i9;
import 'package:expire_app/models/product.dart' as _i5;
import 'package:expire_app/models/shopping_list.dart' as _i6;
import 'package:expire_app/models/shopping_list_element.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:openfoodfacts/model/Nutriments.dart' as _i8;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeFirebaseFirestore_0 extends _i1.Fake
    implements _i2.FirebaseFirestore {}

/// A class which mocks [FirestoreHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirestoreHelper extends _i1.Mock implements _i3.FirestoreHelper {
  MockFirestoreHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseFirestore get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirebaseFirestore_0()) as _i2.FirebaseFirestore);
  @override
  set userInfo(dynamic _userInfo) =>
      super.noSuchMethod(Invocation.setter(#userInfo, _userInfo),
          returnValueForMissingStub: null);
  @override
  _i4.Future<bool> familyExists({String? familyId}) => (super.noSuchMethod(
      Invocation.method(#familyExists, [], {#familyId: familyId}),
      returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<List<String>> getUsersFromFamilyId({String? familyId}) => (super
      .noSuchMethod(
          Invocation.method(#getUsersFromFamilyId, [], {#familyId: familyId}),
          returnValue: Future<List<String>>.value(<String>[])) as _i4
      .Future<List<String>>);
  @override
  _i4.Future<String?> getFamilyIdFromUserId({String? userId}) =>
      (super.noSuchMethod(
          Invocation.method(#getFamilyIdFromUserId, [], {#userId: userId}),
          returnValue: Future<String?>.value()) as _i4.Future<String?>);
  @override
  _i4.Future<String?> getDisplayNameFromUserId({String? userId}) =>
      (super.noSuchMethod(
          Invocation.method(#getDisplayNameFromUserId, [], {#userId: userId}),
          returnValue: Future<String?>.value()) as _i4.Future<String?>);
  @override
  _i4.Future<String?> getImageUrlFromProductId({String? productId}) =>
      (super.noSuchMethod(
          Invocation.method(
              #getImageUrlFromProductId, [], {#productId: productId}),
          returnValue: Future<String?>.value()) as _i4.Future<String?>);
  @override
  _i4.Future<List<_i5.Product>> getProductsFromFamilyId(String? familyId) =>
      (super.noSuchMethod(
              Invocation.method(#getProductsFromFamilyId, [familyId]),
              returnValue: Future<List<_i5.Product>>.value(<_i5.Product>[]))
          as _i4.Future<List<_i5.Product>>);
  @override
  _i4.Future<List<_i6.ShoppingList>> getShoppingListsFromFamilyId(
          String? familyId) =>
      (super.noSuchMethod(
              Invocation.method(#getShoppingListsFromFamilyId, [familyId]),
              returnValue:
                  Future<List<_i6.ShoppingList>>.value(<_i6.ShoppingList>[]))
          as _i4.Future<List<_i6.ShoppingList>>);
  @override
  _i4.Stream<_i2.QuerySnapshot<Object?>> getFamilyProductsStream(
          {String? familyId}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getFamilyProductsStream, [], {#familyId: familyId}),
              returnValue: Stream<_i2.QuerySnapshot<Object?>>.empty())
          as _i4.Stream<_i2.QuerySnapshot<Object?>>);
  @override
  _i4.Future<void> setDisplayName({String? userId, String? displayName}) =>
      (super.noSuchMethod(
          Invocation.method(#setDisplayName, [],
              {#userId: userId, #displayName: displayName}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> addUser({String? userId, String? familyId}) =>
      (super.noSuchMethod(
          Invocation.method(
              #addUser, [], {#userId: userId, #familyId: familyId}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> leaveFamily() =>
      (super.noSuchMethod(Invocation.method(#leaveFamily, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> mergeFamilies(
          {String? familyId,
          bool? mergeProducts = false,
          bool? singleMember = false}) =>
      (super.noSuchMethod(
          Invocation.method(#mergeFamilies, [], {
            #familyId: familyId,
            #mergeProducts: mergeProducts,
            #singleMember: singleMember
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<String?> addProduct({_i5.Product? product, dynamic image}) =>
      (super.noSuchMethod(
          Invocation.method(
              #addProduct, [], {#product: product, #image: image}),
          returnValue: Future<String?>.value()) as _i4.Future<String?>);
  @override
  _i4.Future<void> addShoppingList({_i6.ShoppingList? list}) => (super
      .noSuchMethod(Invocation.method(#addShoppingList, [], {#list: list}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> deleteProduct(String? productId) =>
      (super.noSuchMethod(Invocation.method(#deleteProduct, [productId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> deleteShoppingList(String? id) =>
      (super.noSuchMethod(Invocation.method(#deleteShoppingList, [id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> deleteShoppingListElement(
          String? shoppingListid, String? elementId) =>
      (super.noSuchMethod(
          Invocation.method(
              #deleteShoppingListElement, [shoppingListid, elementId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> updateCompleted({String? listId, bool? completed}) =>
      (super.noSuchMethod(
          Invocation.method(
              #updateCompleted, [], {#listId: listId, #completed: completed}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> updateQuantity(
          {String? listId, String? elementId, int? quantity}) =>
      (super.noSuchMethod(
          Invocation.method(#updateQuantity, [],
              {#listId: listId, #elementId: elementId, #quantity: quantity}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> updateChecked(
          {String? listId, String? elementId, bool? checked}) =>
      (super.noSuchMethod(
          Invocation.method(#updateChecked, [],
              {#listId: listId, #elementId: elementId, #checked: checked}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> addElementToShoppingList(
          {String? listId, _i7.ShoppingListElement? shoppingListElement}) =>
      (super.noSuchMethod(
          Invocation.method(#addElementToShoppingList, [],
              {#listId: listId, #shoppingListElement: shoppingListElement}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i8.Nutriments? parseNutriments(Map<String, dynamic>? JSONnutriments) =>
      (super.noSuchMethod(Invocation.method(#parseNutriments, [JSONnutriments]))
          as _i8.Nutriments?);
}

/// A class which mocks [UserInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserInfo extends _i1.Mock implements _i9.UserInfo {
  MockUserInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set userId(dynamic userId) =>
      super.noSuchMethod(Invocation.setter(#userId, userId),
          returnValueForMissingStub: null);
  @override
  set familyId(dynamic familyId) =>
      super.noSuchMethod(Invocation.setter(#familyId, familyId),
          returnValueForMissingStub: null);
  @override
  set displayName(dynamic displayName) =>
      super.noSuchMethod(Invocation.setter(#displayName, displayName),
          returnValueForMissingStub: null);
  @override
  set email(dynamic email) =>
      super.noSuchMethod(Invocation.setter(#email, email),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> initUserInfoProvider() =>
      (super.noSuchMethod(Invocation.method(#initUserInfoProvider, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}
